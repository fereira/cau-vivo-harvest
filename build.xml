<!-- ANT v1.6.5 build file Hopefully you will not have to alter this file 
	to make it work on your system. Instead, create a localbuild.properties file 
	from the localbuild.properties.in template. Targets: The default target (build) 
	will compile all classes "deploy" will deploy the application "clean" will 
	remove the classfiles -->
<project name="cau-vivo" default="build" basedir=".">


	<!-- Create the build.properties file from localbuild.properties and set 
		the necessary variables there, try to avoid altering this file -->
	<property file="localbuild.properties" />
	<property file="build.properties" />

	<!-- The directories containing source code, properties, and webapp files -->

        <property name="vivo-harvester" value="." />
	<property name="src.dir" value="./src" />
	<property name="test.src" location="test/src" />
	<property name="build.test.dir" location="build/tests" />
	<property name="properties" value="./resources" /> 
	<property name="dist.dir" value="./dist" />
	<property name="build.dir" value="./build" /> 
	 
        <property name="vitro.home" value="/usr/local/vivo-1.8/home"/>
        <property name="vivo.dir" value="../vivo-rel-1.8.1"/>
        <property name="vitro.dir" value="../vivo-rel-1.8.1/vitro-core"/>


	<property name="java.lib" value="./lib" /> 
	<path id="compile.classpath">
		<!-- Include all JAR files that will be included in /lib -->
		<fileset dir="lib">
			<include name="**/*.jar" />
		</fileset> 
                
		<fileset dir="${vivo-harvester}/build">
			<include name="harvester.jar" />
		</fileset> 
                
	</path>

	<path id="run-classpath">
		<fileset dir="lib">
			<include name="*.jar" />
		</fileset>		 

		<fileset dir="${vivo-harvester}/build">
			<include name="harvester.jar" />
		</fileset> 
		<pathelement path="${build.dir}/classes" />
	</path>

	<path id="test-classpath">
		<fileset dir="lib">
			<include name="*.jar" />
		</fileset> 

		<fileset dir="${vivo-harvester}/build">
			<include name="harvester.jar" />
		</fileset> 
		<pathelement path="${build.dir}/classes" />
		<pathelement path="${build.test.dir}" />
	</path>

	<target name="prepare">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/classes" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="build" depends="compile, lib, resources"
		description="Compile main source tree java files">
	</target>


	<target name="compile" depends="prepare">
		<javac destdir="${build.dir}/classes" srcdir="${src.dir}" debug="true"
			deprecation="false" optimize="false" failonerror="true">
			<classpath refid="compile.classpath" />
			
		</javac>
	</target> 

	<target name="jar" depends="build" description="create jar file">
		<jar destfile="${build.dir}/${app.name}.jar">
			<fileset dir="${build.dir}/classes">
				<include name="**/*.*" />
			</fileset>
		</jar>
	</target>

	<target name="lib" description="dependency jar files">
		<!-- copy libraries to build dir -->
		<copy todir="${build.dir}/lib" preservelastmodified="true">
			<flattenmapper />
			<fileset dir="lib/">
				<include name="**/*.jar" />
				<include name="**/*.mar" /> 
			</fileset>
		</copy>
	</target>

    <target name="resources" depends="prepare" >
       <copy todir="${build.dir}/classes" preservelastmodified="true">
          <fileset dir="${src.dir}/main/resources">
             <include name="**/*" />
             <exclude name="README" />
          </fileset>
        </copy>
    </target>

	<target name="clean">
		<delete dir="${build.dir}" />
		<delete file="${build.dir}/${app.name}.jar" />
	</target>

	<target name="compile.tests" depends="jar"
		description="compile the junit test source ">
		<mkdir dir="${build.test.dir}" />
		<!-- Compile the java code from ${test.src} into ${test.build} -->
		<javac srcdir="${test.src}" destdir="${build.test.dir}" debug="${compile.debug}"
			deprecation="false" optimize="false" source="${compile.source}"
			target="${compile.target}">
			<classpath refid="test-classpath" />
		</javac>
		<!-- Copy the test resources to output directory -->
		<copy todir="${build.test.dir}">
			<fileset dir="test/resources" />
		</copy>
		<!-- Copy resources that have been placed in the src directory -->
		<copy todir="${build.test.dir}">
			<fileset dir="${test.src}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	
   <target name="localMods" >

    <copy todir="${vivo.dir}"
      preservelastmodified="true">
      <fileset dir="./localMods/v1.8">
        <include name="build.properties" />
      </fileset>
    </copy>

    <copy todir="${vivo.dir}/config"
      preservelastmodified="true">
      <fileset dir="./localMods/v1.8">
        <include name="runtime.properties" />
      </fileset>
    </copy>

    <copy todir="${vitro.home}"
      preservelastmodified="true">
      <fileset dir="./localMods/v1.8">
        <include name="runtime.properties" />
      </fileset>
    </copy>

    <copy todir="${vitro.home}/config"
      preservelastmodified="true">
      <fileset dir="./localMods/v1.8">
        <include name="applicationSetup.n3" />
      </fileset>
    </copy>

    <copy todir="${vivo.dir}/productMods/WEB-INF"
      preservelastmodified="true">
      <fileset dir="./localMods/v1.8/WEB-INF">
        <include name="**/*" />
      </fileset>
    </copy>

    <copy todir="${vivo.dir}/themes"
      preservelastmodified="true">
      <fileset dir="./localMods/v1.8/themes">
        <include name="**/*" />
      </fileset>
    </copy>

    <copy todir="${vivo.dir}/languages"
      preservelastmodified="true">
      <fileset dir="./localMods/v1.8/languages">
        <include name="**/*" />
      </fileset>
    </copy>

    <copy todir="${vivo.dir}/rdf"
      preservelastmodified="true">
      <fileset dir="./localMods/v1.8/rdf">
        <include name="**/*" />
      </fileset>
    </copy>

   </target>

</project>
